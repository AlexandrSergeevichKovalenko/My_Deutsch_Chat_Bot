import testifavailablegpt4m
import logging
import os
import psycopg2
import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from apscheduler.schedulers.background import BackgroundScheduler

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()

# üîπ –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—É—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é (—Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω–æ)
if not TELEGRAM_BOT_TOKEN:
    TELEGRAM_BOT_TOKEN = "7183316017:AAHXBtqC0nvGhpgwJwhfDId1TUt0aR3JFww"

# üîπ –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫–æ–π —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω
print(f"DEBUG: TELEGRAM_BOT_TOKEN = {repr(TELEGRAM_BOT_TOKEN)}")

# üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø—É—Å—Ç–∞
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

GROUP_CHAT_ID = -1002347376305  # –ù–æ–≤—ã–π ID –≥—Ä—É–ø–ø—ã

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI API ===
testifavailablegpt4m.api_key = os.getenv("OPENAI_API_KEY")
if not testifavailablegpt4m.api_key:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL ===
DATABASE_URL = os.getenv("DATABASE_URL")
if not DATABASE_URL:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

def get_db_connection():
    return psycopg2.connect(DATABASE_URL)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
conn = get_db_connection()
cursor = conn.cursor()
cursor.execute("SELECT version();")
db_version = cursor.fetchone()
print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞! –í–µ—Ä—Å–∏—è: {db_version}")
cursor.close()
conn.close()

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é GPT-4 ===
async def generate_sentences():
    prompt = """
    –ü—Ä–∏–¥—É–º–∞–π 7 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —É—Ä–æ–≤–Ω—è B2-C1 –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –Ω–µ–º–µ—Ü–∫–∏–π.
    –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π –ø–∞—Å—Å–∏–≤–Ω—ã–π –∑–∞–ª–æ–≥ –∏ Konjunktiv II.
    –í—ã–≤–µ–¥–∏ –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.
    """
    
    response = await testifavailablegpt4m.ChatCompletion.acreate(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}]
    )
    sentences = response["choices"][0]["message"]["content"].split("\n")
    return [s.strip() for s in sentences if s.strip()]

async def get_original_sentences():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT sentence FROM sentences ORDER BY RANDOM() LIMIT 5;")
    rows = cursor.fetchall()
    cursor.close()
    conn.close()
    return [row[0] for row in rows] if rows else await generate_sentences()

# === –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞: –∑–∞–¥–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ===
async def set_new_tasks(update: Update, context: CallbackContext):
    if update.message.chat.id != GROUP_CHAT_ID:
        return
    
    new_tasks = update.message.text.replace("/newtasks", "").strip().split("\n")
    if len(new_tasks) < 3:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É.")
        return
    
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM sentences;")
    for task in new_tasks:
        cursor.execute("INSERT INTO sentences (sentence) VALUES (%s);", (task,))
    conn.commit()
    cursor.close()
    conn.close()
    
    await update.message.reply_text("‚úÖ –ù–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

# === –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ 08:00 ===
async def send_morning_tasks(context: CallbackContext):
    sentences = await generate_sentences()  # –í–º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã —Å –ë–î –≤—ã–∑—ã–≤–∞–µ–º GPT-4
    tasks = "\n".join([f"{i+1}. {sentence}" for i, sentence in enumerate(sentences)])
    message = f"üåÖ **–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:**\n\n{tasks}\n\n–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –∏—Ö –Ω–∞ –Ω–µ–º–µ—Ü–∫–∏–π –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç."
    await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=message)

async def check_translation(original_text: str, user_translation: str):
    prompt = f"""
    –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: "{original_text}"
    –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –Ω–µ–º–µ—Ü–∫–∏–π: "{user_translation}"
    
    –û—Ü–µ–Ω–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 100 –∏ –æ–±—ä—è—Å–Ω–∏ –æ—à–∏–±–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å).
    """

    response = await testifavailablegpt4m.ChatCompletion.acreate(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}]
    )
    
    return response["choices"][0]["message"]["content"]


# === –û—Ü–µ–Ω–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ ===
async def handle_message(update: Update, context: CallbackContext):
    sender = update.message.sender_chat or update.message.from_user

    print(f"üîµ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text} –æ—Ç {sender.id} –≤ —á–∞—Ç–µ {update.message.chat.id}")
    print(f"üì© –ü–æ–ª–Ω—ã–π –∞–ø–¥–µ–π—Ç: {update}")

    await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ –ø–æ–∫–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")


# === –ò—Ç–æ–≥ –¥–Ω—è –≤ 20:00 ===
async def send_daily_summary(context: CallbackContext):
    await context.bot.send_message(chat_id=GROUP_CHAT_ID, text="üìä –ò—Ç–æ–≥–∏ –¥–Ω—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã.")

import asyncio

async def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –£–¥–∞–ª—è–µ–º Webhook –ø–µ—Ä–µ–¥ polling (–≤–∞–∂–Ω–æ!)
    await application.bot.delete_webhook(drop_pending_updates=True)

    async def start(update: Update, context: CallbackContext):
        print(f"üìå –ß–∞—Ç ID: {update.message.chat.id} (GROUP_CHAT_ID = {GROUP_CHAT_ID})")
        print(f"üîµ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {update.message.from_user.id} –≤ —á–∞—Ç–µ {update.message.chat.id}")

        if update.message.chat.id != GROUP_CHAT_ID:
            print("üö® –ö–æ–º–∞–Ω–¥–∞ /start –ø—Ä–∏—à–ª–∞ –Ω–µ –∏–∑ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º.")
            return

        print("‚úÖ –ë–æ—Ç –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É –∏ —Å–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ñ–¥–∏ –∑–∞–¥–∞–Ω–∏—è –∑–∞–≤—Ç—Ä–∞!")
        print("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("newtasks", set_new_tasks))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    scheduler = BackgroundScheduler()
    scheduler.add_job(lambda: application.create_task(send_morning_tasks(None)), "cron", hour=8, minute=0)
    scheduler.add_job(lambda: application.create_task(send_morning_tasks(None)), "cron", hour=17, minute=25)
    scheduler.add_job(lambda: application.create_task(send_morning_tasks(None)), "cron", hour=18, minute=0)
    scheduler.add_job(lambda: application.create_task(send_morning_tasks(None)), "cron", hour=20, minute=0)
    scheduler.add_job(lambda: application.create_task(send_morning_tasks(None)), "cron", hour=22, minute=0)
    scheduler.add_job(lambda: application.create_task(send_daily_summary(None)), "cron", hour=23, minute=0)
    scheduler.start()

    print("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    for handler in application.handlers[0]:
        print(handler)

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!")

    async def log_updates(update: Update, context: CallbackContext):
        print(f"üì© –ü–û–õ–£–ß–ï–ù–û –û–ë–ù–û–í–õ–ï–ù–ò–ï: {update}")

    application.add_handler(MessageHandler(filters.ALL, log_updates))  # –õ–æ–≥–∏—Ä—É–µ–º –í–°–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–≤ —Ç–æ–º —á–∏—Å–ª–µ /start)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
    await application.run_polling()

if __name__ == "__main__":
    try:
        asyncio.run(main())  # üöÄ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")

#if __name__ == "__main__":
#    loop = asyncio.get_event_loop()

#    try:
#        task = loop.create_task(main())  # –ó–∞–ø—É—Å–∫–∞–µ–º main() –∫–∞–∫ –∑–∞–¥–∞—á—É
#        loop.run_forever()  # –û—Å—Ç–∞–≤–ª—è–µ–º event loop –∞–∫—Ç–∏–≤–Ω—ã–º
#    except KeyboardInterrupt:
#        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
#    finally:
#        task.cancel()  # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –µ—Å—Ç—å
#        loop.stop()
