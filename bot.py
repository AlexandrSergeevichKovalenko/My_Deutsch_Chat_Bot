import os
import logging
import openai
import os
import psycopg2
import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from apscheduler.schedulers.background import BackgroundScheduler

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()

# üîπ –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—É—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é (—Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω–æ)
if not TELEGRAM_BOT_TOKEN:
    TELEGRAM_BOT_TOKEN = "7183316017:AAHXBtqC0nvGhpgwJwhfDId1TUt0aR3JFww"

# üîπ –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫–æ–π —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω
print(f"DEBUG: TELEGRAM_BOT_TOKEN = {repr(TELEGRAM_BOT_TOKEN)}")

# üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø—É—Å—Ç–∞
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

GROUP_CHAT_ID = -1002347376305  # ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI API ===
openai.api_key = os.getenv("OPENAI_API_KEY")
if not openai.api_key:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL ===
DATABASE_URL = os.getenv("DATABASE_URL")
if not DATABASE_URL:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

def get_db_connection():
    return psycopg2.connect(DATABASE_URL)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
conn = get_db_connection()
cursor = conn.cursor()
cursor.execute("SELECT version();")
db_version = cursor.fetchone()
print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞! –í–µ—Ä—Å–∏—è: {db_version}")
cursor.close()
conn.close()

def initialize_database():
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS sentences (
            id SERIAL PRIMARY KEY,
            sentence TEXT NOT NULL
        );
    """)

    # ‚úÖ –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS translations (
            id SERIAL PRIMARY KEY,
            user_id BIGINT NOT NULL,
            username TEXT,
            sentence_id INT NOT NULL,
            user_translation TEXT NOT NULL,
            score INT,
            feedback TEXT,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    """)

    # ‚úÖ –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—á—Ç–æ–±—ã —É—á–∏—Ç—ã–≤–∞—Ç—å –ª–µ–Ω–∏–≤—ã—Ö)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS messages (
            id SERIAL PRIMARY KEY,
            user_id BIGINT NOT NULL,
            username TEXT NOT NULL,
            message TEXT NOT NULL,
            timestamp TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
        );
    """)


    cursor.execute("""
        CREATE TABLE IF NOT EXISTS daily_sentences (
            id SERIAL PRIMARY KEY,
            date DATE NOT NULL DEFAULT CURRENT_DATE,
            sentence TEXT NOT NULL,
            unique_id INT NOT NULL
        );
    """)


    conn.commit()
    cursor.close()
    conn.close()
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã sentences, translations –∏ messages –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")




# –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
initialize_database()


# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)


async def log_message(update: Update, context: CallbackContext):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    if not update.message:  # –ï—Å–ª–∏ update.message = None, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return  

    user = update.message.from_user
    message_text = update.message.text.strip()

    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute(
        "INSERT INTO messages (user_id, username, message) VALUES (%s, %s, %s);",
        (user.id, user.username or user.first_name, message_text)
    )

    conn.commit()
    cursor.close()
    conn.close()


# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é GPT-4 ===
import asyncio

async def generate_sentences():
    client = openai.AsyncOpenAI(api_key=openai.api_key)
    prompt = """
    –ü—Ä–∏–¥—É–º–∞–π 7 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —É—Ä–æ–≤–Ω—è B2-C1 –Ω–∞ **—Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ** –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ **–Ω–µ–º–µ—Ü–∫–∏–π**.
    
    **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
    - –ò—Å–ø–æ–ª—å–∑—É–π **–ø–∞—Å—Å–∏–≤–Ω—ã–π –∑–∞–ª–æ–≥** –∏ **Konjunktiv II** —Ö–æ—Ç—è –±—ã –≤ –ø–æ–ª–æ–≤–∏–Ω–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
    - –ö–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å **–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ**.
    - **–ù–ï –¥–æ–±–∞–≤–ª—è–π –ø–µ—Ä–µ–≤–æ–¥!** –¢–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.

    **–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞:**
    –≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ –±—ã–ª –æ—Å–Ω–æ–≤–∞–Ω –±–æ–ª–µ–µ 300 –ª–µ—Ç –Ω–∞–∑–∞–¥.
    –ï—Å–ª–∏ –±—ã —É –Ω–∞—Å –±—ã–ª–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, –º—ã –±—ã –ø–æ—Å–µ—Ç–∏–ª–∏ –≤—Å–µ –º—É–∑–µ–∏.
    –í–∞–∂–Ω–æ, —á—Ç–æ–±—ã –≤—Å–µ —Ä–µ—à–µ–Ω–∏—è –±—ã–ª–∏ –ø—Ä–∏–Ω—è—Ç—ã –∫–æ–ª–ª–µ–≥–∏–∞–ª—å–Ω–æ.
    –ö–Ω–∏–≥–∞ –±—ã–ª–∞ –Ω–∞–ø–∏—Å–∞–Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø–∏—Å–∞—Ç–µ–ª–µ–º –≤ –ø—Ä–æ—à–ª–æ–º –≤–µ–∫–µ.
    –ë—ã–ª–æ –±—ã –ª—É—á—à–µ, –µ—Å–ª–∏ –±—ã –æ–Ω —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.
    –ù–∞–º —Å–∫–∞–∑–∞–ª–∏, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é.
    –ï—Å–ª–∏ –±—ã –æ–Ω –º–æ–≥ –≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º, –æ–Ω –±—ã –ª–µ–≥–∫–æ –Ω–∞—à–µ–ª —Ä–∞–±–æ—Ç—É.
    """

    for attempt in range(5):  # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥–æ 5 —Ä–∞–∑
        try:
            response = await client.chat.completions.create(
                model="gpt-4-turbo",
                messages=[{"role": "user", "content": prompt}]
            )
            return response.choices[0].message.content.split("\n")
        except openai.RateLimitError:
            wait_time = (attempt + 1) * 2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É: 2, 4, 6 —Å–µ–∫
            print(f"‚ö†Ô∏è OpenAI API Rate Limit. –ñ–¥–µ–º {wait_time} —Å–µ–∫...")
            await asyncio.sleep(wait_time)

    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç OpenAI. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
    return ["–ó–∞–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 1", "–ó–∞–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 2"]



async def get_original_sentences():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT sentence FROM sentences ORDER BY RANDOM() LIMIT 5;")
    rows = cursor.fetchall()
    cursor.close()
    conn.close()

    if rows:
        return [row[0] for row in rows]
    else:
        print("‚ö†Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ GPT-4...")
        return await generate_sentences()

# === –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞: –∑–∞–¥–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ===
async def set_new_tasks(update: Update, context: CallbackContext):
    if update.message.chat.id != GROUP_CHAT_ID:
        return
    
    new_tasks = update.message.text.replace("/newtasks", "").strip().split("\n")
    if len(new_tasks) < 3:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É.")
        return
    
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM sentences;")
    for task in new_tasks:
        cursor.execute("INSERT INTO sentences (sentence) VALUES (%s);", (task,))
    conn.commit()
    cursor.close()
    conn.close()
    
    await update.message.reply_text("‚úÖ –ù–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

# === –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ 08:00 ===
application = None  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞

# async def send_morning_tasks(context=None):
#     sentences = await get_original_sentences()
#     tasks = "\n".join([f"{i+1}. {sentence}" for i, sentence in enumerate(sentences)])
#     message = f"üåÖ **Guten Morgen, –º–∞–ª—ã–µ! –õ–æ–≤–∏—Ç–µ –ø–æ–¥–∞—á—É:**\n\n{tasks}\n\n X–≤–∞—Ç–∏—Ç —á–µ—Å–∞—Ç—å –∂–æ–ø—É. –ü–µ—Ä–µ–≤–æ–¥–∏—Ç–µ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: /translate –ù–æ–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ü–µ—Ä–µ–≤–æ–¥"

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ context, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –±–µ—Ä–µ–º –±–æ—Ç–∞ –∏–∑ application
#     if context:
#         bot = context.bot
#     else:
#         bot = application.bot  # –ë–µ—Ä–µ–º –±–æ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç

#     await bot.send_message(chat_id=GROUP_CHAT_ID, text=message)

async def send_morning_tasks(context=None):
    conn = get_db_connection()
    cursor = conn.cursor()

    # –£–∑–Ω–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    cursor.execute("SELECT COUNT(*) FROM daily_sentences WHERE date = CURRENT_DATE;")
    start_index = cursor.fetchone()[0]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    sentences = await get_original_sentences()
    tasks = []
    
    for i, sentence in enumerate(sentences, start=start_index + 1):  # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è
        tasks.append(f"{i}. {sentence}")
        cursor.execute(
            "INSERT INTO daily_sentences (date, sentence, unique_id) VALUES (CURRENT_DATE, %s, %s);",
            (sentence, i),
        )

    conn.commit()
    cursor.close()
    conn.close()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"üåÖ **Guten Morgen, –º–∞–ª—ã–µ! –õ–æ–≤–∏—Ç–µ –ø–æ–¥–∞—á—É:**\n\n" + "\n".join(tasks) + \
              "\n\n–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: `/translate <–Ω–æ–º–µ—Ä> <–ø–µ—Ä–µ–≤–æ–¥>`"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if context:
        bot = context.bot
    else:
        bot = application.bot

    await bot.send_message(chat_id=GROUP_CHAT_ID, text=message)

# === GPT-4 –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ ===

import asyncio

async def check_translation(original_text, user_translation):
    client = openai.AsyncOpenAI(api_key=openai.api_key)  # –ù–æ–≤—ã–π API-–∫–ª–∏–µ–Ω—Ç
    
    prompt = f"""
    –¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ª–∏–Ω–≥–≤–∏—Å—Ç –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ–º–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞.
    –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å **—Ä—É—Å—Å–∫–æ–≥–æ** –Ω–∞ **–Ω–µ–º–µ—Ü–∫–∏–π**.

    - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (–Ω–∞ —Ä—É—Å—Å–∫–æ–º): "{original_text}"
    - –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º): "{user_translation}"

    **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ**:
    1. **–í—ã—Å—Ç–∞–≤—å –æ—Ü–µ–Ω–∫—É –æ—Ç 0 –¥–æ 100** (–ø–æ —É—Ä–æ–≤–Ω—é —Ç–æ—á–Ω–æ—Å—Ç–∏, –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –∏ —Å—Ç–∏–ª—è, –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é, –ü—Ä–∏ –ø–æ–ª–Ω–æ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –æ—Ü–µ–Ω–∫–∞ –Ω–æ–ª—å).
    2. ** –î–µ—Ç–∞–ª—å–Ω–æ –æ–±—ä—è—Å–Ω–∏ –æ—à–∏–±–∫–∏**, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å (–Ω–µ –±–æ–ª–µ–µ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π). –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—ä—è—Å–Ω–∏ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ò –∫–∞–∫ –æ–Ω–∞ —Å—Ç—Ä–æ–∏—Ç—Å—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
    3. **–î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é**, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥(–í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –≤–µ—Ä–µ–Ω). –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞(—ç—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ–º—ã–π –ø–µ—Ä–µ–≤–æ–¥).
    –ú–æ–∂–µ—à—å —Ç–∞–∫–∂–µ —É–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤-—Å–∏–Ω–æ–Ω–∏–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –¥–∞–Ω–Ω–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ(—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ª–æ–≤ —É—Ä–æ–≤–Ω—è B2 –ò C1).

    **–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (–±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç!)**:
    –û—Ü–µ–Ω–∫–∞: X/100
    –û—à–∏–±–∫–∏: ...
    –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ...
    """

    for attempt in range(3):  # –î–æ 3-—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö API
        try:
            response = await client.chat.completions.create(
                model="gpt-4-turbo",
                messages=[{"role": "user", "content": prompt}]
            )
            return response.choices[0].message.content.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        except openai.RateLimitError:
            wait_time = (attempt + 1) * 5  # 5, 10, 15 —Å–µ–∫—É–Ω–¥
            print(f"‚ö†Ô∏è OpenAI API –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ñ–¥—ë–º {wait_time} —Å–µ–∫...")
            await asyncio.sleep(wait_time)

    return "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

import re

# async def check_user_translation(update: Update, context: CallbackContext):
#     user_id = update.message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
#     message_text = update.message.text

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç—É "/–ø–µ—Ä–µ–≤–æ–¥ <–Ω–æ–º–µ—Ä> <—Ç–µ–∫—Å—Ç>"
#     match = re.match(r"/–ø–µ—Ä–µ–≤–æ–¥ (\d+) (.+)", message_text)
#     if not match:
#         await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç `/–ø–µ—Ä–µ–≤–æ–¥ <–Ω–æ–º–µ—Ä> <–≤–∞—à –ø–µ—Ä–µ–≤–æ–¥>`")
#         return

#     sentence_number = int(match.group(1))  # –ù–æ–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
#     user_translation = match.group(2)  # –°–∞–º –ø–µ—Ä–µ–≤–æ–¥

#     # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
#     original_sentences = await get_original_sentences()

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
#     if sentence_number < 1 or sentence_number > len(original_sentences):
#         await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(original_sentences)}.")
#         return

#     original_text = original_sentences[sentence_number - 1]  # –û—Ä–∏–≥–∏–Ω–∞–ª –Ω–∞ —Ä—É—Å—Å–∫–æ–º

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ GPT
#     feedback = await check_translation(original_text, user_translation)

#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ü–µ–Ω–∫—É
#     await update.message.reply_text(
#         f"üë§ {update.message.from_user.first_name}, –≤–∞—à –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è {sentence_number}-–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:\n"
#         f"‚úÖ –û—Ü–µ–Ω–∫–∞: {feedback}"
#     )

import re
import logging

# async def check_user_translation(update: Update, context: CallbackContext):
#     message_text = update.message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
#     logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {message_text}")  # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É

#     # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ "/–ø–µ—Ä–µ–≤–æ–¥", –∏ "/translate"
#     match = re.match(r"^/(–ø–µ—Ä–µ–≤–æ–¥|translate)\s+(\d+)\s+(.+)$", message_text)

#     if not match:
#         logging.info(f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: {message_text}")  # ‚úÖ –õ–æ–≥ –æ—à–∏–±–∫–∏
#         await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç `/–ø–µ—Ä–µ–≤–æ–¥ <–Ω–æ–º–µ—Ä> <–≤–∞—à –ø–µ—Ä–µ–≤–æ–¥>`")
#         return

#     sentence_number = int(match.group(2))  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ë–µ—Ä—ë–º –Ω–æ–º–µ—Ä –∏–∑ –≤—Ç–æ—Ä–æ–π –≥—Ä—É–ø–ø—ã
#     user_translation = match.group(3).strip()  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ë–µ—Ä—ë–º –ø–µ—Ä–µ–≤–æ–¥ –∏–∑ —Ç—Ä–µ—Ç—å–µ–π –≥—Ä—É–ø–ø—ã

#     logging.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: –ù–æ–º–µ—Ä={sentence_number}, –ü–µ—Ä–µ–≤–æ–¥={user_translation}")

#     # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
#     original_sentences = await get_original_sentences()

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
#     if sentence_number < 1 or sentence_number > len(original_sentences):
#         await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(original_sentences)}.")
#         return

#     original_text = original_sentences[sentence_number - 1]  # ‚úÖ –ë–µ—Ä—ë–º –Ω—É–∂–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ GPT
#     feedback = await check_translation(original_text, user_translation)

#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ü–µ–Ω–∫—É
#     await update.message.reply_text(
#         f"üë§ {update.message.from_user.first_name}, –≤–∞—à –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è {sentence_number}-–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:\n"
#         f"‚úÖ –û—Ü–µ–Ω–∫–∞: {feedback}"
#     )

# async def check_user_translation(update: Update, context: CallbackContext):
#     message_text = update.message.text.strip()
#     logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {message_text}")

#     match = re.match(r"^/(–ø–µ—Ä–µ–≤–æ–¥|translate)\s+(\d+)\s+(.+)$", message_text)
#     if not match:
#         logging.info(f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: {message_text}")
#         await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç `/–ø–µ—Ä–µ–≤–æ–¥ <–Ω–æ–º–µ—Ä> <–≤–∞—à –ø–µ—Ä–µ–≤–æ–¥>`")
#         return

#     sentence_number = int(match.group(2))
#     user_translation = match.group(3).strip()
#     user_id = update.message.from_user.id
#     username = update.message.from_user.first_name

#     logging.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: –ù–æ–º–µ—Ä={sentence_number}, –ü–µ—Ä–µ–≤–æ–¥={user_translation}")

#     original_sentences = await get_original_sentences()

#     if sentence_number < 1 or sentence_number > len(original_sentences):
#         await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(original_sentences)}.")
#         return

#     original_text = original_sentences[sentence_number - 1]

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ GPT
#     # Log the original sentence before checking translation
#     logging.info(f"üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞. –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {original_text}")

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ GPT
#     feedback = await check_translation(original_text, user_translation)


#     # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫—É (–∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "–û—Ü–µ–Ω–∫–∞: 85/100")
#     score_match = re.search(r"–û—Ü–µ–Ω–∫–∞:\s*(\d+)/100", feedback)
#     score = int(score_match.group(1)) if score_match else None

#     # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
#     conn = get_db_connection()
#     cursor = conn.cursor()
#     cursor.execute(
#         """
#         INSERT INTO translations (user_id, username, sentence_id, user_translation, score, feedback)
#         VALUES (%s, %s, %s, %s, %s, %s);
#         """,
#         (user_id, username, sentence_number, user_translation, score, feedback),
#     )
#     conn.commit()
#     cursor.close()
#     conn.close()

#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ü–µ–Ω–∫—É
#     await update.message.reply_text(
#         f"üë§ {username}, –≤–∞—à –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è {sentence_number}-–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:\n"
#         f"‚úÖ –û—Ü–µ–Ω–∫–∞: {feedback}"
#     )

async def check_user_translation(update: Update, context: CallbackContext):
    message_text = update.message.text.strip()
    logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {message_text}")

    match = re.match(r"^/(–ø–µ—Ä–µ–≤–æ–¥|translate)\s+(\d+)\s+(.+)$", message_text)
    if not match:
        logging.info(f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: {message_text}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç `/–ø–µ—Ä–µ–≤–æ–¥ <–Ω–æ–º–µ—Ä> <–≤–∞—à –ø–µ—Ä–µ–≤–æ–¥>`")
        return

    unique_id = int(match.group(2))  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞ –¥–µ–Ω—å
    user_translation = match.group(3).strip()
    user_id = update.message.from_user.id
    username = update.message.from_user.first_name

    logging.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: –ù–æ–º–µ—Ä={unique_id}, –ü–µ—Ä–µ–≤–æ–¥={user_translation}")

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "SELECT sentence FROM daily_sentences WHERE date = CURRENT_DATE AND unique_id = %s;",
        (unique_id,),
    )
    row = cursor.fetchone()
    cursor.close()
    conn.close()

    if not row:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º {unique_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö.")
        return

    original_text = row[0]

    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–µ—Ä–µ–≤–æ–¥–∞
    logging.info(f"üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞. –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {original_text}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ GPT
    feedback = await check_translation(original_text, user_translation)

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫—É
    score_match = re.search(r"–û—Ü–µ–Ω–∫–∞:\s*(\d+)/100", feedback)
    score = int(score_match.group(1)) if score_match else None

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        """
        INSERT INTO translations (user_id, username, sentence_id, user_translation, score, feedback)
        VALUES (%s, %s, %s, %s, %s, %s);
        """,
        (user_id, username, unique_id, user_translation, score, feedback),
    )
    conn.commit()
    cursor.close()
    conn.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ü–µ–Ω–∫—É
    await update.message.reply_text(
        f"üë§ {username}, –≤–∞—à –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è {unique_id}-–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:\n"
        f"‚úÖ –û—Ü–µ–Ω–∫–∞: {feedback}"
    )



# # === –û—Ü–µ–Ω–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ ===
# async def handle_message(update: Update, context: CallbackContext):
#     user_text = update.message.text
#     original_sentences = await get_original_sentences()
#     best_score = 0
#     best_feedback = ""

#     for original_text in original_sentences:
#         feedback = await check_translation(original_text, user_text)
#         try:
#             score = int(feedback.split("/")[0])
#         except ValueError:
#             score = 50  
#         if score > best_score:
#             best_score = score
#             best_feedback = feedback

#     await update.message.reply_text(f"‚úÖ –û—Ü–µ–Ω–∫–∞: {best_score}/100\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {best_feedback}")

# === –ò—Ç–æ–≥ –¥–Ω—è –≤ 20:00 ===
async def send_daily_summary(context: CallbackContext):
    conn = get_db_connection()
    cursor = conn.cursor()

    # 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö, –∫—Ç–æ –¥–µ–ª–∞–ª –ø–µ—Ä–µ–≤–æ–¥—ã
    cursor.execute("""
        SELECT DISTINCT user_id, username 
        FROM translations 
        WHERE timestamp::date = CURRENT_DATE;
    """)
    active_users = {row[0]: row[1] for row in cursor.fetchall()}

    # 2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö, –∫—Ç–æ –ø–∏—Å–∞–ª —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ –≤ —á–∞—Ç
    cursor.execute("""
        SELECT DISTINCT user_id, username
        FROM messages
        WHERE timestamp::date = CURRENT_DATE;
    """)  
    all_users = {row[0]: row[1] for row in cursor.fetchall()}

    # 3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    cursor.execute("""
        SELECT username, COUNT(*), AVG(score) 
        FROM translations 
        WHERE timestamp::date = CURRENT_DATE 
        GROUP BY username 
        ORDER BY COUNT(*) DESC;
    """)
    rows = cursor.fetchall()

    cursor.close()
    conn.close()

    # –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –¥–µ–ª–∞–ª –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    if not rows:
        await context.bot.send_message(chat_id=GROUP_CHAT_ID, text="üìä –î–∞ –≤—ã —á—Ç–æ –æ—Ö—É–µ–ª–∏. –í—ã –∂–µ –Ω–∏—Ö—É—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ —Å–¥–µ–ª–∞–ª–∏!")
        return

    summary = "üìä **–ò—Ç–æ–≥–∏ –¥–Ω—è:**\n\n"
    
    # 4Ô∏è‚É£ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ—Ö, –∫—Ç–æ –¥–µ–ª–∞–ª –ø–µ—Ä–µ–≤–æ–¥—ã
    for username, count, avg_score in rows:
        summary += f"üë§ {username}: **{count} –ø–µ—Ä–µ–≤–æ–¥(–æ–≤)**, —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_score:.1f}/100\n"

    # 5Ô∏è‚É£ –û–ø—Ä–µ–¥–µ–ª—è–µ–º "–ª–µ–Ω–∏–≤—ã—Ö", –∫—Ç–æ –ø–∏—Å–∞–ª –≤ —á–∞—Ç, –Ω–æ –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏–ª
    lazy_users = {uid: uname for uid, uname in all_users.items() if uid not in active_users}
    if lazy_users:
        summary += "\nüö® **–õ–µ–Ω–∏–≤—ã–µ –º—É–¥–∞–∫–∏:**\n"
        for username in lazy_users.values():
            summary += f"üë§ {username}: –ª–µ–Ω–∏–≤–æ–µ –¥–µ—Ä—å–º–æ\n"

    await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=summary)



# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
# def main():
#     application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
#     application.add_handler(CommandHandler("start", lambda u, c: u.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ñ–¥–∏ –∑–∞–¥–∞–Ω–∏—è –∑–∞–≤—Ç—Ä–∞!")))
#     application.add_handler(CommandHandler("newtasks", set_new_tasks))
#     application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
#     scheduler = BackgroundScheduler()
#     scheduler.add_job(lambda: application.create_task(send_morning_tasks(None)), "cron", hour=8, minute=0)
#     scheduler.add_job(lambda: application.create_task(send_morning_tasks(None)), "cron", hour=20, minute=55)
#     scheduler.add_job(lambda: application.create_task(send_morning_tasks(None)), "cron", hour=21, minute=31)
#     scheduler.add_job(lambda: application.create_task(send_morning_tasks(None)), "cron", hour=21, minute=50)
#     scheduler.add_job(lambda: application.create_task(send_morning_tasks(None)), "cron", hour=22, minute=20)
#     scheduler.add_job(lambda: application.create_task(send_daily_summary(None)), "cron", hour=23, minute=10)
#     scheduler.start()
    
#     application.run_polling()

# if __name__ == "__main__":
#     main()

import asyncio

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    global application
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", lambda u, c: u.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ñ–¥–∏ –∑–∞–¥–∞–Ω–∏—è –∑–∞–≤—Ç—Ä–∞!")))
    application.add_handler(CommandHandler("newtasks", set_new_tasks))
    application.add_handler(CommandHandler("translate", check_user_translation))
    
    # üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω—É–∂–Ω–æ –¥–ª—è —É—á–µ—Ç–∞ –ª–µ–Ω–∏–≤—ã—Ö)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, log_message))  

    scheduler = BackgroundScheduler()

    def run_async_job(async_func, context=None):
        if context is None:
            context = CallbackContext(application=application)  # –°–æ–∑–¥–∞–µ–º `context`, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç

        try:
            loop = asyncio.get_running_loop()  # ‚úÖ –ë–µ—Ä–µ–º —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—â–∏–π event loop
        except RuntimeError:
            loop = asyncio.new_event_loop()  # ‚ùå –í –ø–æ—Ç–æ–∫–µ `apscheduler` –Ω–µ—Ç loop ‚Äî —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            asyncio.set_event_loop(loop)

        loop.run_until_complete(async_func(context))  # ‚úÖ –¢–µ–ø–µ—Ä—å event loop –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç

    # üîπ –ó–∞–ø—É—Å–∫ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
    scheduler.add_job(lambda: run_async_job(send_morning_tasks, CallbackContext(application=application)), "cron", hour=6, minute=1)
    # üîπ –ó–∞–ø—É—Å–∫ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è
    scheduler.add_job(lambda: run_async_job(send_daily_summary, CallbackContext(application=application)), "cron", hour=23, minute=28)

    scheduler.start()
    
    application.run_polling()

if __name__ == "__main__":
    main()

