import os
import logging
import openai
import psycopg2
import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from apscheduler.schedulers.background import BackgroundScheduler


# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()


# üîπ –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫–æ–π —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω
print(f"DEBUG: TELEGRAM_BOT_TOKEN = {repr(TELEGRAM_BOT_TOKEN)}")

# üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø—É—Å—Ç–∞
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

GROUP_CHAT_ID = -1002347376305  # ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã
#GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID", "").strip()

if not GROUP_CHAT_ID:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: GROUP_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
GROUP_CHAT_ID = int(GROUP_CHAT_ID)

print("üöÄ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway:")
for key, value in os.environ.items():
    print(f"{key}: {value[:10]}...")  # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏


# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI API ===
openai.api_key = os.getenv("OPENAI_API_KEY")

# üîç Debugging: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Railway –≤–∏–¥–∏—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
print(f"DEBUG: OPENAI_API_KEY = {repr(openai.api_key)}")

if not openai.api_key:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")



# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL ===
DATABASE_URL = os.getenv("DATABASE_URL")
if not DATABASE_URL:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

def get_db_connection():
    return psycopg2.connect(DATABASE_URL)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
conn = get_db_connection()
cursor = conn.cursor()
cursor.execute("SELECT version();")
db_version = cursor.fetchone()
print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞! –í–µ—Ä—Å–∏—è: {db_version}")
cursor.close()
conn.close()

def initialize_database():
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS sentences (
            id SERIAL PRIMARY KEY,
            sentence TEXT NOT NULL
        );
    """)

    # ‚úÖ –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS translations (
            id SERIAL PRIMARY KEY,
            user_id BIGINT NOT NULL,
            username TEXT,
            sentence_id INT NOT NULL,
            user_translation TEXT NOT NULL,
            score INT,
            feedback TEXT,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    """)

    # ‚úÖ –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—á—Ç–æ–±—ã —É—á–∏—Ç—ã–≤–∞—Ç—å –ª–µ–Ω–∏–≤—ã—Ö)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS messages (
            id SERIAL PRIMARY KEY,
            user_id BIGINT NOT NULL,
            username TEXT NOT NULL,
            message TEXT NOT NULL,
            timestamp TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
        );
    """)


    cursor.execute("""
        CREATE TABLE IF NOT EXISTS daily_sentences (
            id SERIAL PRIMARY KEY,
            date DATE NOT NULL DEFAULT CURRENT_DATE,
            sentence TEXT NOT NULL,
            unique_id INT NOT NULL,
            user_id BIGINT  -- üÜï –¢–µ–ø–µ—Ä—å —É–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        );
    """)
    
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS user_progress (
            id SERIAL PRIMARY KEY,
            user_id BIGINT,
            username TEXT,
            start_time TIMESTAMP,
            end_time TIMESTAMP,
            completed BOOLEAN DEFAULT FALSE,
            CONSTRAINT unique_user_session UNIQUE (user_id, start_time)
        );
    """)


    conn.commit()
    cursor.close()
    conn.close()
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã sentences, translations –∏ messages –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")




# –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
initialize_database()



# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)




async def log_message(update: Update, context: CallbackContext):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    if not update.message:  # –ï—Å–ª–∏ update.message = None, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return  

    user = update.message.from_user
    message_text = update.message.text.strip()

    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute(
        "INSERT INTO messages (user_id, username, message) VALUES (%s, %s, %s);",
        (user.id, user.username or user.first_name, message_text)
    )

    conn.commit()
    cursor.close()
    conn.close()




async def send_morning_reminder(context: CallbackContext):
    message = (
        "üåÖ **–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –≤—Å–µ–º –∫—Ä–æ–º–µ –ö–æ–Ω—á–∏—Ç—ã!**\n\n"
        "–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –ø–µ—Ä–µ–≤–æ–¥–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É `/letsgo`. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–∞–º –±—É–¥—É—Ç –≤—ã—Å–ª–∞–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n\n"
        "üìå **–í–∞–∂–Ω–æ:**\n"
        "üîπ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ ‚Äî –æ–±—â–µ–Ω–∏–µ –≤—Ä–µ–º—è –≤–∞—à–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –±—É–¥–µ—Ç –æ—Ç–Ω–∏–º–∞—Ç—å—Å—è –æ—Ç –Ω–∞–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞–º–∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞. –ò—Ç–æ–≥ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º: —Å—É–º–º–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã –∑–∞ –ø–µ—Ä–µ–≤–æ–¥ –¥–µ–ª–∏–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –≤—ã—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è (–≤ –º–∏–Ω—É—Ç–∞—Ö) –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π - —á–µ–º –¥–æ–ª—å—à–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ —Ç–µ–º –±–æ–ª—å—à–µ —à—Ç—Ä–∞—Ñ)!\n"
        "üîπ –ö–æ–º–∞–Ω–¥–∞ `/letsgo` –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –ø–∞—Ä—Ç–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ï—Å–ª–∏ –≤–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –µ—â—ë –ø–∏—à–∏—Ç–µ `/getmore`.\n"
        "üîπ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤—Å–µ—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ `/done` –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏–µ–º `/yes`.\n"
        "üîπ –í 09:00, 12:00 –∏ 15:00 –±—É–¥—É—Ç **–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∏—Ç–æ–≥–∏** –ø–æ –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É.\n"
        "üîπ –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ 22:00.\n\n"
    )  
    
    # üìå –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    commands = (
        "üìú **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/letsgo - –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—É—é –ø–∞—Ä—Ç–∏—é –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥\n"
        "/done - –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ (—Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è)\n"
        "/translate - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã\n"
        "/getmore - –ü–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n"
        "/stats - –£–∑–Ω–∞—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
    await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=message)
    await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=commands)



async def letsgo(update: Update, context: CallbackContext):
    user = update.message.from_user
    user_id = user.id
    username = user.username or user.first_name

    conn = get_db_connection()
    cursor = conn.cursor()

    # üîπ **–ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è**
    cursor.execute("""
        SELECT user_id FROM user_progress 
        WHERE user_id = %s AND start_time::date = CURRENT_DATE AND completed = FALSE;
    """, (user_id,))
    
    active_session = cursor.fetchone()

    if active_session is not None:
        await update.message.reply_text(
            "‚ùå –í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –ø–µ—Ä–µ–≤–æ–¥! –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º. "
            "–ï—Å–ª–∏ –≤—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏ –∑–∞–¥–∞–Ω–∏—è –∏ —Ö–æ—Ç–∏—Ç–µ –µ—â—ë, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '/getmore'."
        )
        cursor.close()
        conn.close()
        return

    # ‚úÖ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–Ω–µ–π**
    cursor.execute("""
        UPDATE user_progress 
        SET end_time = NOW(), completed = TRUE 
        WHERE user_id = %s AND start_time::date < CURRENT_DATE AND completed = FALSE;
    """, (user_id,))
    conn.commit()

    # ‚úÖ **–°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ `user_progress`, –ù–ï –ó–ê–¢–ò–†–ê–Ø —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏**
    cursor.execute("""
        INSERT INTO user_progress (user_id, username, start_time, completed) 
        VALUES (%s, %s, NOW(), FALSE);
    """, (user_id, username))
    conn.commit()

    # ‚úÖ **–í—ã–¥–∞—ë–º –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è**
    sentences = [s.strip() for s in await get_original_sentences() if s.strip()]

    if not sentences:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        cursor.close()
        conn.close()
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–ª–∞–ª `/getmore`)
    cursor.execute("""
        SELECT COUNT(*) FROM daily_sentences WHERE date = CURRENT_DATE AND user_id = %s;
    """, (user_id,))
    last_index = cursor.fetchone()[0]  

    tasks = []
    for i, sentence in enumerate(sentences, start=last_index + 1):  
        cursor.execute("""
            INSERT INTO daily_sentences (date, sentence, unique_id, user_id) 
            VALUES (CURRENT_DATE, %s, %s, %s);
        """, (sentence, i, user_id))
        tasks.append(f"{i}. {sentence}")

    conn.commit()
    cursor.close()
    conn.close()

    logging.info(f"üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({user_id}) –Ω–∞—á–∞–ª –ø–µ—Ä–µ–≤–æ–¥. –ó–∞–ø–∏—Å–∞–Ω–æ {len(tasks)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.")

    tasks_text = "\n".join(tasks)
    await update.message.reply_text(
        f"üöÄ **–í—ã –Ω–∞—á–∞–ª–∏ –ø–µ—Ä–µ–≤–æ–¥! –í—Ä–µ–º—è –ø–æ—à–ª–æ.**\n\n"
        f"üìú **–í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:**\n{tasks_text}\n\n"
        "‚úèÔ∏è **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é** `/done`."
    )



async def done(update: Update, context: CallbackContext):
    user = update.message.from_user
    user_id = user.id

    conn = get_db_connection()
    cursor = conn.cursor()

    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    cursor.execute("""
        SELECT start_time, end_time, completed 
        FROM user_progress 
        WHERE user_id = %s AND completed = FALSE
        ORDER BY start_time DESC 
        LIMIT 1;
    """, (user_id,))
    
    row = cursor.fetchone()

    if not row:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /letsgo, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        cursor.close()
        conn.close()
        return

    start_time, end_time, completed = row

    # ‚úÖ –ü–æ–∑–≤–æ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Å–µ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∞—Ç—å —Å–µ—Å—Å–∏—é –≤—Ä—É—á–Ω—É—é
    cursor.execute("""
        UPDATE user_progress 
        SET end_time = NOW(), completed = TRUE 
        WHERE user_id = %s AND completed = FALSE;
    """, (user_id,))
    conn.commit()

    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã
    cursor.execute("""
        SELECT COUNT(*) FROM daily_sentences 
        WHERE date = CURRENT_DATE AND user_id = %s;
    """, (user_id,))
    total_sentences = cursor.fetchone()[0]

    cursor.execute("""
        SELECT COUNT(*) FROM translations 
        WHERE user_id = %s AND timestamp::date = CURRENT_DATE;
    """, (user_id,))
    translated_count = cursor.fetchone()[0]

    if translated_count < total_sentences:
        await update.message.reply_text(
            f"‚ö†Ô∏è –í—ã –ø–µ—Ä–µ–≤–µ–ª–∏ {translated_count} –∏–∑ {total_sentences} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.\n"
            "–ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω, –Ω–æ –Ω–µ –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã! –≠—Ç–æ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∞—à –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª."
        )
    else:
        await update.message.reply_text("‚úÖ **–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥! –í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã.**")

    cursor.close()
    conn.close()


async def force_finalize_sessions(context: CallbackContext = None):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –í–°–ï –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Ç–æ–ª—å–∫–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –≤ 23:59."""
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("""
        UPDATE user_progress 
        SET end_time = NOW(), completed = TRUE
        WHERE completed = FALSE AND start_time::date = CURRENT_DATE;
    """)

    conn.commit()
    cursor.close()
    conn.close()

    await context.bot.send_message(chat_id=GROUP_CHAT_ID, text="üîî **–í—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã!**")




async def auto_finalize_sessions():
    """–ö–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∏—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã."""
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("""
        UPDATE user_progress 
        SET end_time = NOW(), completed = TRUE
        WHERE completed = FALSE
        AND user_id IN (SELECT DISTINCT user_id FROM translations WHERE timestamp::date = CURRENT_DATE);
    """)
    
    conn.commit()
    cursor.close()
    conn.close()





# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é GPT-4 ===
import asyncio

async def generate_sentences():
    client = openai.AsyncOpenAI(api_key=openai.api_key)
    prompt = """
    –ü—Ä–∏–¥—É–º–∞–π 7 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —É—Ä–æ–≤–Ω—è B2-C1 –Ω–∞ **—Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ** –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ **–Ω–µ–º–µ—Ü–∫–∏–π**.
    
    **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
    - –ò—Å–ø–æ–ª—å–∑—É–π **–ø–∞—Å—Å–∏–≤–Ω—ã–π –∑–∞–ª–æ–≥** –∏ **Konjunktiv II** –í 30% –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
    - –ö–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å **–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ**.
    - **–ù–ï –¥–æ–±–∞–≤–ª—è–π –ø–µ—Ä–µ–≤–æ–¥!** –¢–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
    - –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —á–∞—Å—Ç–æ —É–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å–Ω—É—é –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏ –ª–µ–∫—Å–∏–∫—É(–±–∏–∑–Ω–µ—Å –º–µ–¥–∏—Ü–∏–Ω–∞, –•–æ–±–±–∏, –°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è, –£—á—ë–±–∞, –†–∞–±–æ—Ç–∞, –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è) –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É.

    **–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞:**
    –≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ –±—ã–ª –æ—Å–Ω–æ–≤–∞–Ω –±–æ–ª–µ–µ 300 –ª–µ—Ç –Ω–∞–∑–∞–¥.
    –ï—Å–ª–∏ –±—ã —É –Ω–∞—Å –±—ã–ª–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, –º—ã –±—ã –ø–æ—Å–µ—Ç–∏–ª–∏ –≤—Å–µ –º—É–∑–µ–∏.
    –í–∞–∂–Ω–æ, —á—Ç–æ–±—ã –≤—Å–µ —Ä–µ—à–µ–Ω–∏—è –±—ã–ª–∏ –ø—Ä–∏–Ω—è—Ç—ã –∫–æ–ª–ª–µ–≥–∏–∞–ª—å–Ω–æ.
    –ö–Ω–∏–≥–∞ –±—ã–ª–∞ –Ω–∞–ø–∏—Å–∞–Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø–∏—Å–∞—Ç–µ–ª–µ–º –≤ –ø—Ä–æ—à–ª–æ–º –≤–µ–∫–µ.
    –ë—ã–ª–æ –±—ã –ª—É—á—à–µ, –µ—Å–ª–∏ –±—ã –æ–Ω —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.
    –ù–∞–º —Å–∫–∞–∑–∞–ª–∏, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é.
    –ï—Å–ª–∏ –±—ã –æ–Ω –º–æ–≥ –≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º, –æ–Ω –±—ã –ª–µ–≥–∫–æ –Ω–∞—à–µ–ª —Ä–∞–±–æ—Ç—É.
    –°–¥–µ–ª–∞–ª —Ä–∞–±–æ—Ç—É –æ–Ω –ø–æ—à—ë–ª –æ—Ç–¥—ã—Ö–∞—Ç—å.
    –ó–Ω–∞—è –æ –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏ –Ω–µ–º—Ü–µ–≤ —è –≤—ã–±—Ä–∞–ª –≤–µ–∂–ª–∏–≤—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É.
    –ù–µ –∑–Ω–∞—è –µ–≥–æ –ª–∏—á–Ω–æ, –µ–≥–æ –ø–æ—Å—Ç—É–ø–æ–∫ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–Ω—è—Ç—å.
    –ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤–æ–≤—Ä–µ–º—è, –Ø –ø–æ—Å–ø–µ—à–∏–ª.
    –£—á–∏—Ç—ã–≤–∞—è –ø—Ä–∞–≤–∏–ª–∞ –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏, –æ–Ω –≥–æ–≤–æ—Ä–∏–ª —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ.

    """

    for attempt in range(5):  # –ü—Ä–æ–±—É–µ–º –¥–æ 5 —Ä–∞–∑ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            response = await client.chat.completions.create(
                model="gpt-4-turbo",
                messages=[{"role": "user", "content": prompt}]
            )
            sentences = response.choices[0].message.content.split("\n")
            filtered_sentences = [s.strip() for s in sentences if s.strip()]  # ‚úÖ –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if filtered_sentences:
                return filtered_sentences
        except openai.RateLimitError:
            wait_time = (attempt + 1) * 2  # –ó–∞–¥–µ—Ä–∂–∫–∞: 2, 4, 6 —Å–µ–∫...
            print(f"‚ö†Ô∏è OpenAI API Rate Limit. –ñ–¥–µ–º {wait_time} —Å–µ–∫...")
            await asyncio.sleep(wait_time)

    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç OpenAI. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
    return ["–ó–∞–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 1", "–ó–∞–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 2"]




async def get_original_sentences():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT sentence FROM sentences ORDER BY RANDOM() LIMIT 5;")
    rows = cursor.fetchall()
    cursor.close()
    conn.close()

    if rows:
        return [row[0] for row in rows]
    else:
        print("‚ö†Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ GPT-4...")
        return await generate_sentences()




# –ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ –û—Ç –∞–¥–º–∏–Ω–∞ –≥—Ä—É–ø–ø—ã
async def set_new_tasks(update: Update, context: CallbackContext):
    user = update.message.from_user
    chat_id = update.message.chat.id

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–ª–∞ –¢–û–õ–¨–ö–û –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    if chat_id != user.id:
        await update.message.reply_text("‚ùå –ù–∞–ø–∏—à–∏—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –º–Ω–µ –≤ –õ–ò–ß–ù–´–ï —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    new_tasks = update.message.text.replace("/newtasks", "").strip().split("\n")
    
    if len(new_tasks) < 3:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É.")
        return

    # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –ë–î
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM sentences;")
    for task in new_tasks:
        cursor.execute("INSERT INTO sentences (sentence) VALUES (%s);", (task,))
    conn.commit()
    cursor.close()
    conn.close()
    
    await update.message.reply_text("‚úÖ –ù–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –û–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º.")



application = None  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞





async def send_more_tasks(update: Update, context: CallbackContext):
    user = update.message.from_user
    user_id = user.id
    username = user.username or user.first_name

    conn = get_db_connection()
    cursor = conn.cursor()

    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–≤–æ–¥
    cursor.execute("SELECT start_time FROM user_progress WHERE user_id = %s;", (user_id,))
    row = cursor.fetchone()

    if not row:
        await update.message.reply_text("‚ùå –í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ –ø–µ—Ä–µ–≤–æ–¥! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /letsgo.")
        cursor.close()
        conn.close()
        return

    # üîπ –§–∏–∫—Å–∏—Ä—É–µ–º **–Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞** (–Ω–æ –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ!)
    cursor.execute(
        """
        INSERT INTO user_progress (user_id, username, start_time, completed)
        VALUES (%s, %s, NOW(), FALSE)
        ON CONFLICT (user_id, start_time) DO UPDATE 
        SET start_time = NOW(), completed = FALSE;
        """,
        (user_id, username)
    )

    # üîπ **–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å**
    cursor.execute("SELECT COUNT(*) FROM daily_sentences WHERE date = CURRENT_DATE AND user_id = %s;", (user_id,))
    last_index = cursor.fetchone()[0]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∂–µ –≤—ã–¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    # üîπ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    sentences = await get_original_sentences()
    tasks = []

    for i, sentence in enumerate(sentences, start=last_index + 1):  # **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!**
        if not sentence.strip(): # ‚úÖ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            continue
        cursor.execute(
            "INSERT INTO daily_sentences (date, sentence, unique_id, user_id) VALUES (CURRENT_DATE, %s, %s, %s);",
            (sentence, i, user_id),
        )
        tasks.append(f"{i}. {sentence}")  # **–¢–µ–ø–µ—Ä—å –Ω—É–º–µ—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è!**

    conn.commit()
    cursor.close()
    conn.close()

    # üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    message = (
        f"‚úÖ **–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è! –í—Ä–µ–º—è –ø–æ—à–ª–æ.**\n\n"
        + "\n".join(tasks) +
        "\n\nüìå –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: `/translate <–Ω–æ–º–µ—Ä> <–≤–∞—à –ø–µ—Ä–µ–≤–æ–¥>`\n"
        "‚ö† **–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å –ø–æ–º–æ—â—å—é** `/done`!"
    )

    await update.message.reply_text(message)





# === GPT-4 –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ ===

import asyncio

async def check_translation(original_text, user_translation):
    client = openai.AsyncOpenAI(api_key=openai.api_key)  # –ù–æ–≤—ã–π API-–∫–ª–∏–µ–Ω—Ç
    
    prompt = f"""
    –¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ª–∏–Ω–≥–≤–∏—Å—Ç –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ–º–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞.
    –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å **—Ä—É—Å—Å–∫–æ–≥–æ** –Ω–∞ **–Ω–µ–º–µ—Ü–∫–∏–π**.

    - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (–Ω–∞ —Ä—É—Å—Å–∫–æ–º): "{original_text}"
    - –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º): "{user_translation}"

    **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ**:
    1. **–í—ã—Å—Ç–∞–≤—å –æ—Ü–µ–Ω–∫—É –æ—Ç 0 –¥–æ 100** –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é, –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –Ω–∞–±–æ—Ä—É –ª–µ–∫—Å–∏–∫–∏, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏(–ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏ —ç—Ç–æ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Å–æ–º—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π) –∏ —Å—Ç–∏–ª—è. –ü—Ä–∏ –ø–æ–ª–Ω–æ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –æ—Ü–µ–Ω–∫–∞ –Ω–æ–ª—å).
    2. **–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—ä—è—Å–Ω–∏ –∫–∞–∫ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ç—Ä–æ–∏—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–∞—è –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è** —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏.
    3. **–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ (—ç—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ–º—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥)**.
    4. –î–ª—è –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ–º—ã—Ö —Å–ª–æ–≤ —É—Ä–æ–≤–Ω—è B2-C1 —É–∫–∞–∂–∏ –¥–≤–∞ —Å–∏–Ω–æ–Ω–∏–º–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –°–∏–Ω–æ–Ω–∏–º—ã:....

    **–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (–±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç!)**:
    –û—Ü–µ–Ω–∫–∞: X/100
    –û—à–∏–±–∫–∏: ...
    –í–µ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: ...
    –°–∏–Ω–æ–Ω–∏–º—ã/–ê–Ω—Ç–æ–Ω–∏–º—ã: ...
    """

    for attempt in range(3):  # –î–æ 3-—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö API
        try:
            response = await client.chat.completions.create(
                model="gpt-4-turbo",
                messages=[{"role": "user", "content": prompt}]
            )
            return response.choices[0].message.content.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        except openai.RateLimitError:
            wait_time = (attempt + 1) * 5  # 5, 10, 15 —Å–µ–∫—É–Ω–¥
            print(f"‚ö†Ô∏è OpenAI API –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ñ–¥—ë–º {wait_time} —Å–µ–∫...")
            await asyncio.sleep(wait_time)

    return "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."



import re
import logging

async def check_user_translation(update: Update, context: CallbackContext):
    if not update.message or not update.message.text:
        return  

    message_text = update.message.text.strip()
    logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {message_text}")

    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É `/translate`
    translations_text = message_text.replace("/translate", "").strip()
    
    if not translations_text:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ü–æ—Å–ª–µ /translate –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–æ–≤.")
        return

    # –†–∞–∑–±–∏—Ä–∞–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–æ–º–µ—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –ø–µ—Ä–µ–≤–æ–¥—ã
    pattern = re.compile(r"(\d+)\.\s*(.+)")
    translations = pattern.findall(translations_text)

    if not translations:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: \n\n/translate\n1. <–ø–µ—Ä–µ–≤–æ–¥>\n2. <–ø–µ—Ä–µ–≤–æ–¥>")
        return

    user_id = update.message.from_user.id
    username = update.message.from_user.first_name

    conn = get_db_connection()
    cursor = conn.cursor()

    # üîπ –ü–æ–ª—É—á–∞–µ–º **ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é**
    cursor.execute(
        "SELECT unique_id FROM daily_sentences WHERE date = CURRENT_DATE AND user_id = %s;", 
        (user_id,)
    )
    allowed_sentences = {row[0] for row in cursor.fetchall()}  # –°–æ–±–∏—Ä–∞–µ–º –≤ set() –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞

    results = []  # –•—Ä–∞–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è Telegram

    for number_str, user_translation in translations:
        sentence_number = int(number_str)

        # üîπ **–ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é**
        if sentence_number not in allowed_sentences:
            results.append(f"‚ùå –û—à–∏–±–∫–∞: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {sentence_number} –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç!")
            continue

        # üîπ **–ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è**
        cursor.execute(
            "SELECT id, sentence FROM daily_sentences WHERE date = CURRENT_DATE AND unique_id = %s AND user_id = %s;",
            (sentence_number, user_id),
        )
        row = cursor.fetchone()

        if not row:
            results.append(f"‚ùå –û—à–∏–±–∫–∞: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {sentence_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            continue

        sentence_id, original_text = row

        # üîπ **–ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–≤–æ–¥ —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è**
        cursor.execute(
            "SELECT id FROM translations WHERE user_id = %s AND sentence_id = %s AND timestamp::date = CURRENT_DATE;",
            (user_id, sentence_id)
        )
        existing_translation = cursor.fetchone()

        if existing_translation:
            results.append(f"‚ö†Ô∏è –í—ã —É–∂–µ –ø–µ—Ä–µ–≤–æ–¥–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {sentence_number}. –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è!")
            continue

        logging.info(f"üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ ‚Ññ{sentence_number}: {user_translation}")

        # üîπ **–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ GPT**
        MAX_FEEDBACK_LENGTH = 1000  # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è GPT
        feedback = await check_translation(original_text, user_translation)

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ "–û—Ü–µ–Ω–∫–∞: 85/100"
        score_match = re.search(r"–û—Ü–µ–Ω–∫–∞:\s*(\d+)/100", feedback)
        score = int(score_match.group(1)) if score_match else None

        # üîπ **–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≤ –±–∞–∑—É**
        cursor.execute(
            "INSERT INTO translations (user_id, username, sentence_id, user_translation, score, feedback) "
            "VALUES (%s, %s, %s, %s, %s, %s);",
            (user_id, username, sentence_id, user_translation, score, feedback),
        )

        conn.commit()

        # –û–±—Ä–µ–∑–∞–µ–º, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if len(feedback) > MAX_FEEDBACK_LENGTH:
            feedback = feedback[:MAX_FEEDBACK_LENGTH] + "...\n‚ö†Ô∏è –û—Ç–≤–µ—Ç GPT –±—ã–ª —Å–æ–∫—Ä–∞—â—ë–Ω."

        results.append(f"üìú **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {sentence_number}**\nüéØ –û—Ü–µ–Ω–∫–∞: {feedback}")

    cursor.close()
    conn.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ
    MAX_MESSAGE_LENGTH = 4000  # –ß—Ç–æ–±—ã –Ω–µ —Ä–∏—Å–∫–æ–≤–∞—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
    message_text = "\n\n".join(results)

    if len(message_text) > MAX_MESSAGE_LENGTH:
        parts = [message_text[i:i+MAX_MESSAGE_LENGTH] for i in range(0, len(message_text), MAX_MESSAGE_LENGTH)]
        for part in parts:
            await update.message.reply_text(part)
    else:
        logging.info(f"üì© –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(message_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        await update.message.reply_text(message_text)






async def send_progress_report(context: CallbackContext):
    conn = get_db_connection()
    cursor = conn.cursor()

    # üîπ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–∏—Å–∞–ª–∏ –≤ —á–∞—Ç **–∑–∞ –º–µ—Å—è—Ü**
    cursor.execute("""
        SELECT DISTINCT user_id, username 
        FROM messages 
        WHERE timestamp >= date_trunc('month', CURRENT_DATE);
    """)
    all_users = {row[0]: row[1] for row in cursor.fetchall()}

    # üîπ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö, –∫—Ç–æ –ø–µ—Ä–µ–≤—ë–ª —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ **–∑–∞ —Å–µ–≥–æ–¥–Ω—è**
    cursor.execute("""
        SELECT DISTINCT user_id FROM translations WHERE timestamp::date = CURRENT_DATE;
    """)
    active_users = {row[0] for row in cursor.fetchall()}

    # üîπ –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º **–∑–∞ —Å–µ–≥–æ–¥–Ω—è**(checked)
    cursor.execute("""
        SELECT 
        ds.user_id,
        COUNT(DISTINCT ds.id) AS –≤—Å–µ–≥–æ_–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π,
        COUNT(DISTINCT t.id) AS –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ,
        (COUNT(DISTINCT ds.id) - COUNT(DISTINCT t.id)) AS –ø—Ä–æ–ø—É—â–µ–Ω–æ,
        COALESCE(p.avg_time, 0) AS —Å—Ä–µ–¥–Ω–µ–µ_–≤—Ä–µ–º—è_—Å–µ—Å—Å–∏–∏_–≤_–º–∏–Ω—É—Ç–∞—Ö, -- ‚úÖ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞ –¥–µ–Ω—å
        COALESCE(p.total_time, 0) AS –æ–±—â–µ–µ_–≤—Ä–µ–º—è_–∑–∞_–¥–µ–Ω—å, -- ‚úÖ –û–±—â–µ–µ –≤—Ä–µ–º—è –∑–∞ –¥–µ–Ω—å
        COALESCE(AVG(t.score), 0) AS —Å—Ä–µ–¥–Ω—è—è_–æ—Ü–µ–Ω–∫–∞,
        COALESCE(AVG(t.score), 0) 
            - (COALESCE(p.avg_time, 0) * 1) -- ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤ —Ä–∞—Å—á—ë—Ç–∞—Ö
            - ((COUNT(DISTINCT ds.id) - COUNT(DISTINCT t.id)) * 20) AS –∏—Ç–æ–≥–æ–≤—ã–π_–±–∞–ª–ª
    FROM daily_sentences ds
    LEFT JOIN translations t ON ds.user_id = t.user_id AND ds.id = t.sentence_id
    LEFT JOIN (
        SELECT user_id, 
            AVG(EXTRACT(EPOCH FROM (end_time - start_time))/60) AS avg_time, -- ‚úÖ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –∑–∞ –¥–µ–Ω—å
            SUM(EXTRACT(EPOCH FROM (end_time - start_time))/60) AS total_time -- ‚úÖ –û–±—â–µ–µ –≤—Ä–µ–º—è –∑–∞ –¥–µ–Ω—å
        FROM user_progress
        WHERE completed = TRUE 
            AND start_time::date = CURRENT_DATE -- ‚úÖ –¢–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –∑–∞ –¥–µ–Ω—å
        GROUP BY user_id
    ) p ON ds.user_id = p.user_id
    WHERE ds.date = CURRENT_DATE
    GROUP BY ds.user_id, p.avg_time, p.total_time
    ORDER BY –∏—Ç–æ–≥–æ–≤—ã–π_–±–∞–ª–ª DESC;
    """)
    rows = cursor.fetchall()

    cursor.close()
    conn.close()

    # üîπ –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    if not rows:
        await context.bot.send_message(chat_id=GROUP_CHAT_ID, text="üìä –°–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ –ø–µ—Ä–µ–≤—ë–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!")
        return

    progress_report = "üìä **–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∏—Ç–æ–≥–∏ –ø–µ—Ä–µ–≤–æ–¥–∞:**\n\n"

    for user_id, total, translated, missed, avg_minutes, total_minutes, avg_score, final_score in rows:
        progress_report += (
            f"üë§ **{all_users.get(user_id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}**\n"
            f"üìú –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: **{translated}/{total}**\n"
            f"üö® –ù–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: **{missed}**\n"
            f"‚è± –í—Ä–µ–º—è —Å—Ä–µ–¥–Ω–µ–µ: **{avg_minutes:.1f} –º–∏–Ω**\n"
            f"‚è± –í—Ä–µ–º—è –æ–±—â.: **{total_minutes:.1f} –º–∏–Ω**\n"
            f"üéØ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: **{avg_score:.1f}/100**\n"
            f"üèÜ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª: **{final_score:.1f}**\n\n"
        )

    # üö® **–î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –ø—Ä–æ –ª–µ–Ω–∏–≤—ã—Ö (—É—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ—Ö, –∫—Ç–æ –ø–∏—Å–∞–ª –≤ —á–∞—Ç –∑–∞ –º–µ—Å—è—Ü)**
    lazy_users = {uid: uname for uid, uname in all_users.items() if uid not in active_users}
    if lazy_users:
        progress_report += "\nüö® **–õ–µ–Ω–∏–≤—Ü—ã (–ø–∏—Å–∞–ª–∏ –≤ —á–∞—Ç, –Ω–æ –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏–ª–∏):**\n"
        for username in lazy_users.values():
            progress_report += f"üë§ {username}: –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–≤—ë–ª!\n"

    await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=progress_report)




#SQL –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ
async def send_daily_summary(context: CallbackContext):

    conn = get_db_connection()
    cursor = conn.cursor()

    # üîπ –°–æ–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫—Ç–æ –ø–µ—Ä–µ–≤—ë–ª —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)
    cursor.execute("""
        SELECT DISTINCT user_id, username 
        FROM translations 
        WHERE timestamp::date = CURRENT_DATE;
    """)
    active_users = {row[0]: row[1] for row in cursor.fetchall()}

    # üîπ –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö, –∫—Ç–æ —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ –ø–∏—Å–∞–ª –≤ —á–∞—Ç
    cursor.execute("""
        SELECT DISTINCT user_id, username
        FROM messages
        WHERE timestamp >= date_trunc('month', CURRENT_DATE);
    """)
    all_users = {row[0]: row[1] for row in cursor.fetchall()}

    # üîπ –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å
    cursor.execute("""
       SELECT 
            ds.user_id, 
            COUNT(DISTINCT ds.id) AS total_sentences,
            COUNT(DISTINCT t.id) AS translated,
            (COUNT(DISTINCT ds.id) - COUNT(DISTINCT t.id)) AS missed,
            COALESCE(p.avg_time, 0) AS avg_time_minutes, 
            COALESCE(p.total_time, 0) AS total_time_minutes, 
            COALESCE(AVG(t.score), 0) AS avg_score,
            COALESCE(AVG(t.score), 0) 
            - (COALESCE(p.avg_time, 0) * 1) 
            - ((COUNT(DISTINCT ds.id) - COUNT(DISTINCT t.id)) * 20) AS final_score
        FROM daily_sentences ds
        LEFT JOIN translations t ON ds.user_id = t.user_id AND ds.id = t.sentence_id
        LEFT JOIN (
            SELECT user_id, 
                AVG(EXTRACT(EPOCH FROM (end_time - start_time))/60) AS avg_time, 
                SUM(EXTRACT(EPOCH FROM (end_time - start_time))/60) AS total_time
            FROM user_progress
            WHERE completed = true
        		AND start_time::date = CURRENT_DATE -- ‚úÖ –¢–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –∑–∞ –¥–µ–Ω—å
            GROUP BY user_id
        ) p ON ds.user_id = p.user_id
        WHERE ds.date = CURRENT_DATE
        GROUP BY ds.user_id, p.avg_time, p.total_time
        ORDER BY final_score DESC;
    """)
    rows = cursor.fetchall()

    cursor.close()
    conn.close()

    # üîπ –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    if not rows:
        await context.bot.send_message(chat_id=GROUP_CHAT_ID, text="üìä –°–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ –ø–µ—Ä–µ–≤—ë–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!")
        return

    summary = "üìä **–ò—Ç–æ–≥–∏ –¥–Ω—è:**\n\n"
    medals = ["ü•á", "ü•à", "ü•â"]
    for i, (user_id, total_sentences, translated, missed, avg_minutes, total_time_minutes, avg_score, final_score) in enumerate(rows):
        username = all_users.get(user_id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')  # ‚úÖ –ë–µ—Ä—ë–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        medal = medals[i] if i < len(medals) else "üí©"
        summary += (
            f"{medal} **{username}**\n"
            f"üìú –í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: **{total_sentences}**\n"
            f"‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: **{translated}**\n"
            f"üö® –ù–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: **{missed}**\n"
            f"‚è± –í—Ä–µ–º—è —Å—Ä–µ–¥–Ω–µ–µ: **{avg_minutes:.1f} –º–∏–Ω**\n"
            f"‚è± –í—Ä–µ–º—è –æ–±—â–µ–µ: **{total_time_minutes:.1f} –º–∏–Ω**\n"
            f"üéØ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: **{avg_score:.1f}/100**\n"
            f"üèÜ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª: **{final_score:.1f}**\n\n"
        )


    # üö® **–î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –ø—Ä–æ –ª–µ–Ω–∏–≤—ã—Ö**
    lazy_users = {uid: uname for uid, uname in all_users.items() if uid not in active_users}
    if lazy_users:
        summary += "\nüö® **–õ–µ–Ω–∏–≤—Ü—ã (–ø–∏—Å–∞–ª–∏ –≤ —á–∞—Ç, –Ω–æ –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏–ª–∏):**\n"
        for username in lazy_users.values():
            summary += f"üë§ {username}: –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–≤—ë–ª!\n"

    await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=summary)




#SQL –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ
async def send_weekly_summary(context: CallbackContext):

    conn = get_db_connection()
    cursor = conn.cursor()

    # üîπ –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
    cursor.execute("""
        SELECT 
        t.username, 
        COUNT(DISTINCT t.sentence_id) AS –≤—Å–µ–≥–æ_–ø–µ—Ä–µ–≤–æ–¥–æ–≤,
        COALESCE(AVG(t.score), 0) AS —Å—Ä–µ–¥–Ω—è—è_–æ—Ü–µ–Ω–∫–∞,
        COALESCE(p.avg_time, 0) AS —Å—Ä–µ–¥–Ω–µ–µ_–≤—Ä–µ–º—è_—Å–µ—Å—Å–∏–∏_–≤_–º–∏–Ω—É—Ç–∞—Ö, -- ‚úÖ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏
        COALESCE(p.total_time, 0) AS –æ–±—â–µ–µ_–≤—Ä–µ–º—è_–≤_–º–∏–Ω—É—Ç–∞—Ö, -- ‚úÖ –¢–µ–ø–µ—Ä—å –µ—Å—Ç—å –∏ –æ–±—â–µ–µ –≤—Ä–µ–º—è
        (SELECT COUNT(*) 
        FROM daily_sentences 
        WHERE date >= CURRENT_DATE - INTERVAL '7 days' 
        AND user_id = t.user_id) 
        - COUNT(DISTINCT t.sentence_id) AS –ø—Ä–æ–ø—É—â–µ–Ω–æ_–∑–∞_–Ω–µ–¥–µ–ª—é,
        COALESCE(AVG(t.score), 0) 
            - (COALESCE(p.avg_time, 0) * 1) -- ‚úÖ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤ —à—Ç—Ä–∞—Ñ–µ
            - ((SELECT COUNT(*) 
                FROM daily_sentences 
                WHERE date >= CURRENT_DATE - INTERVAL '7 days' 
                AND user_id = t.user_id) 
            - COUNT(DISTINCT t.sentence_id)) * 20
            AS –∏—Ç–æ–≥–æ–≤—ã–π_–±–∞–ª–ª
    FROM translations t
    LEFT JOIN (
        SELECT user_id, 
            AVG(EXTRACT(EPOCH FROM (end_time - start_time))/60) AS avg_time, -- ‚úÖ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏
            SUM(EXTRACT(EPOCH FROM (end_time - start_time))/60) AS total_time -- ‚úÖ –û–±—â–µ–µ –≤—Ä–µ–º—è
        FROM user_progress 
        WHERE completed = TRUE 
        AND start_time >= CURRENT_DATE - INTERVAL '7 days'
        GROUP BY user_id
    ) p ON t.user_id = p.user_id
    WHERE t.timestamp >= CURRENT_DATE - INTERVAL '7 days'
    GROUP BY t.username, t.user_id, p.avg_time, p.total_time
    ORDER BY –∏—Ç–æ–≥–æ–≤—ã–π_–±–∞–ª–ª DESC;

    """)
    rows = cursor.fetchall()

    cursor.close()
    conn.close()

    if not rows:
        await context.bot.send_message(chat_id=GROUP_CHAT_ID, text="üìä –ù–µ–¥–µ–ª—è –ø—Ä–æ—à–ª–∞, –Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ –ø–µ—Ä–µ–≤–µ–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!")
        return

    summary = "üèÜ **–ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏:**\n\n"

    medals = ["ü•á", "ü•à", "ü•â"]
    for i, (username, count, avg_score, avg_minutes, total_minutes, missed, final_score) in enumerate(rows):
        medal = medals[i] if i < len(medals) else "üí©"
        summary += (
            f"{medal} **{username}**\n"
            f"üìú –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: **{count}**\n"
            f"üéØ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: **{avg_score:.1f}/100**\n"
            f"‚è± –í—Ä–µ–º—è —Å—Ä–µ–¥–Ω–µ–µ: **{avg_minutes:.1f} –º–∏–Ω**\n"
            f"‚è± –í—Ä–µ–º—è –æ–±—â–µ–µ: **{total_minutes:.1f} –º–∏–Ω**\n"
            f"üö® –ü—Ä–æ–ø—É—â–µ–Ω–æ: **{missed}**\n"
            f"üèÜ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª: **{final_score:.1f}**\n\n"
        )

    await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=summary)




async def send_morning_tasks(context: CallbackContext):
    message = (
        "üåÖ ** –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—á–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥!**\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–º–∞–Ω–¥—É `/letsgo`.\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–∞–º –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n\n"
        "üìù **–ö–æ–º–∞–Ω–¥—ã –Ω–∞ –¥–µ–Ω—å:**\n"
        "‚úÖ `/letsgo` - –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è\n"
        "‚úÖ `/done` - –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ (‚ö†Ô∏è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ `/yes`!)\n"
        "‚úÖ `/translate` - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã\n"
        "‚úÖ `/getmore` - –ü–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n"
        "‚úÖ `/stats` - –£–∑–Ω–∞—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
    )

    await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=message)



import asyncio


async def start(update: Update, context: CallbackContext):
    message = (
        "üëã **–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º –∫—Ä–æ–º–µ Konchita!**\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–µ—Ä–µ–≤–æ–¥—á–µ—Å–∫–∏–π —á–µ–ª–ª–µ–Ω–¥–∂!\n\n"
        "üìù **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "‚úÖ `/letsgo` - –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥\n"
        "‚úÖ `/done` - –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ (‚ö†Ô∏è –ø–æ—Ç–æ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ `/yes`!)\n"
        "‚úÖ `/translate` - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã\n"
        "‚úÖ `/getmore` - –ü–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n"
        "‚úÖ `/stats` - –£–∑–Ω–∞—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
    )
    await update.message.reply_text(message)



async def user_stats(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    username = update.message.from_user.first_name

    conn = get_db_connection()
    cursor = conn.cursor()

    # üìå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
    cursor.execute("""
        SELECT 
            COUNT(DISTINCT t.sentence_id) AS –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ,  
            COALESCE(AVG(t.score), 0) AS —Å—Ä–µ–¥–Ω—è—è_–æ—Ü–µ–Ω–∫–∞,
            COALESCE((
                SELECT AVG(EXTRACT(EPOCH FROM (p.end_time - p.start_time)) / 60)  -- ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º AVG –≤–º–µ—Å—Ç–æ SUM
                FROM user_progress p
                WHERE p.user_id = t.user_id 
                    AND p.start_time::date = CURRENT_DATE
                    AND p.completed = TRUE
            ), 0) AS —Å—Ä–µ–¥–Ω–µ–µ_–≤—Ä–µ–º—è_—Å–µ—Å—Å–∏–∏_–≤_–º–∏–Ω—É—Ç–∞—Ö,  -- ‚úÖ –û–±–Ω–æ–≤–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ
            GREATEST(0, (SELECT COUNT(*) FROM daily_sentences 
                        WHERE date = CURRENT_DATE AND user_id = t.user_id) - COUNT(DISTINCT t.sentence_id)) AS –ø—Ä–æ–ø—É—â–µ–Ω–æ,
            COALESCE(AVG(t.score), 0) 
                - (COALESCE((
                    SELECT AVG(EXTRACT(EPOCH FROM (p.end_time - p.start_time)) / 60)  -- ‚úÖ –ó–¥–µ—Å—å —Ç–æ–∂–µ AVG
                    FROM user_progress p
                    WHERE p.user_id = t.user_id 
                        AND p.start_time::date = CURRENT_DATE
                        AND p.completed = TRUE
                ), 0) * 1) 
                - (GREATEST(0, (SELECT COUNT(*) FROM daily_sentences 
                                WHERE date = CURRENT_DATE AND user_id = t.user_id) - COUNT(DISTINCT t.sentence_id)) * 20) AS –∏—Ç–æ–≥–æ–≤—ã–π_–±–∞–ª–ª
        FROM translations t
        WHERE t.user_id = %s AND t.timestamp::date = CURRENT_DATE
        GROUP BY t.user_id;
    """, (user_id,))

    today_stats = cursor.fetchone()

    # üìå –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
    cursor.execute("""
        SELECT 
            t.user_id,
            COUNT(DISTINCT t.sentence_id) AS –≤—Å–µ–≥–æ_–ø–µ—Ä–µ–≤–æ–¥–æ–≤,
            COALESCE(AVG(t.score), 0) AS —Å—Ä–µ–¥–Ω—è—è_–æ—Ü–µ–Ω–∫–∞,
            COALESCE(p.avg_session_time, 0) AS —Å—Ä–µ–¥–Ω–µ–µ_–≤—Ä–µ–º—è_—Å–µ—Å—Å–∏–∏_–≤_–º–∏–Ω—É—Ç–∞—Ö,  
            COALESCE(p.total_time, 0) AS –æ–±—â–µ–µ_–≤—Ä–µ–º—è_–∑–∞_–Ω–µ–¥–µ–ª—é,  
            GREATEST(0, COALESCE(ds.total_sentences, 0) - COUNT(DISTINCT t.sentence_id)) AS –ø—Ä–æ–ø—É—â–µ–Ω–æ_–∑–∞_–Ω–µ–¥–µ–ª—é,
            COALESCE(AVG(t.score), 0) 
                - (COALESCE(p.avg_session_time, 0) * 2)  
                - (GREATEST(0, COALESCE(ds.total_sentences, 0) - COUNT(DISTINCT t.sentence_id)) * 20) AS –∏—Ç–æ–≥–æ–≤—ã–π_–±–∞–ª–ª
        FROM translations t
        LEFT JOIN (
            -- ‚úÖ –û—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            SELECT 
                user_id, 
                AVG(EXTRACT(EPOCH FROM (end_time - start_time)) / 60) AS avg_session_time, 
                SUM(EXTRACT(EPOCH FROM (end_time - start_time)) / 60) AS total_time 
            FROM user_progress
            WHERE completed = TRUE 
                AND start_time >= CURRENT_DATE - INTERVAL '7 days'
            GROUP BY user_id
        ) p ON t.user_id = p.user_id
        LEFT JOIN (
            SELECT user_id, COUNT(*) AS total_sentences
            FROM daily_sentences
            WHERE date >= CURRENT_DATE - INTERVAL '7 days'
            GROUP BY user_id
        ) ds ON t.user_id = ds.user_id
        WHERE t.timestamp >= CURRENT_DATE - INTERVAL '7 days' 
            AND t.user_id = %s  -- ‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        GROUP BY t.user_id, p.avg_session_time, p.total_time, ds.total_sentences;
    """, (user_id,))

    weekly_stats = cursor.fetchone()

    cursor.close()
    conn.close()

    # üìå –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    if today_stats:
        today_text = (
            f"üìÖ **–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({username})**\n"
            f"üîπ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: {today_stats[0]}\n"
            f"üéØ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {today_stats[1]:.1f}/100\n"
            f"‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: {today_stats[2]:.1f} –º–∏–Ω\n"
            f"üö® –ü—Ä–æ–ø—É—â–µ–Ω–æ: {today_stats[3]}\n"
            f"üèÜ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª: {today_stats[4]:.1f}\n"
        )
    else:
        today_text = f"üìÖ **–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({username})**\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö (–≤—ã –µ—â—ë –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏–ª–∏)."

    if weekly_stats:
        weekly_text = (
            f"\nüìÜ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é**\n"
            f"üîπ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: {weekly_stats[1]}\n"
            f"üéØ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {weekly_stats[2]:.1f}/100\n"
            f"‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: {weekly_stats[3]:.1f} –º–∏–Ω\n"
            f"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è –∑–∞ –Ω–µ–¥–µ–ª—é: {weekly_stats[4]:.1f} –º–∏–Ω\n"
            f"üö® –ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞ –Ω–µ–¥–µ–ª—é: {weekly_stats[5]}\n"
            f"üèÜ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª: {weekly_stats[6]:.1f}\n"
        )
    else:
        weekly_text = "\nüìÜ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é**\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."

    await update.message.reply_text(today_text + weekly_text)




import datetime
import pytz

async def debug_timezone(update: Update, context: CallbackContext):
    now_utc = datetime.datetime.now(pytz.utc)
    await update.message.reply_text(
        f"üïí –¢–µ–∫—É—â–µ–µ UTC-–≤—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {now_utc.strftime('%Y-%m-%d %H:%M:%S')}"
    )


from telegram import Update
from telegram.ext import CommandHandler, CallbackContext
import psycopg2
import os

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ ID
def reset_user_data(user_id):
    conn = psycopg2.connect(os.getenv("DATABASE_URL"))
    cursor = conn.cursor()

    # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    cursor.execute("DELETE FROM translations WHERE user_id = %s AND timestamp::date = CURRENT_DATE;", (user_id,))

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("DELETE FROM user_progress WHERE user_id = %s;", (user_id,))

    conn.commit()
    cursor.close()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /resetme <ID>
# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
import datetime

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
def reset_user_data(user_id, date=None):
    """–£–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å (–∏–ª–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –µ—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞)"""
    conn = psycopg2.connect(os.getenv("DATABASE_URL"))
    cursor = conn.cursor()

    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é
    if date is None:
        date = datetime.date.today()
    
    # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
    cursor.execute("""
        DELETE FROM translations 
        WHERE user_id = %s AND timestamp::date = %s;
    """, (user_id, date))

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
    cursor.execute("""
        DELETE FROM user_progress 
        WHERE user_id = %s AND start_time::date = %s;
    """, (user_id, date))

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≤—ã–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
    cursor.execute("""
        DELETE FROM daily_sentences 
        WHERE user_id = %s AND date = %s;
    """, (user_id, date))

    conn.commit()
    cursor.close()
    conn.close()

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /resetme (–¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö) ===
async def reset_user_command(update: Update, context: CallbackContext):
    user = update.message.from_user
    chat_id = update.message.chat_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω–∞)
    if context.args:
        ADMIN_ID = 117649764  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π Telegram ID
        if user.id != ADMIN_ID:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
            return

        try:
            user_id = int(context.args[0])  # –ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        except ValueError:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
            return

        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç, –ø—ã—Ç–∞–µ–º—Å—è —Å—á–∏—Ç–∞—Ç—å –¥–∞—Ç—É
        if len(context.args) > 1:
            try:
                date = datetime.datetime.strptime(context.args[1], "%Y-%m-%d").date()
            except ValueError:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD.")
                return
        else:
            date = None  # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è

    else:
        # –ï—Å–ª–∏ ID –Ω–µ —É–∫–∞–∑–∞–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ **—Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è** –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        user_id = user.id
        date = None  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è

    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
    reset_user_data(user_id, date)
    date_text = f"–∑–∞ {date}" if date else "–∑–∞ —Å–µ–≥–æ–¥–Ω—è"
    await update.message.reply_text(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} {date_text} —Å–±—Ä–æ—à–µ–Ω—ã!")
    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} {date_text} —Å–±—Ä–æ—à–µ–Ω—ã!")






def main():
    global application
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))  
    application.add_handler(CommandHandler("newtasks", set_new_tasks))
    application.add_handler(CommandHandler("translate", check_user_translation))
    application.add_handler(CommandHandler("getmore", send_more_tasks))
    application.add_handler(CommandHandler("letsgo", letsgo))
    application.add_handler(CommandHandler("done", done))
    application.add_handler(CommandHandler("stats", user_stats))  
    application.add_handler(CommandHandler("time", debug_timezone))
    application.add_handler(CommandHandler("reset", reset_user_command))  

    # üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, log_message))  

    scheduler = BackgroundScheduler()

    def run_async_job(async_func, context=None):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤–Ω—É—Ç—Ä–∏ APScheduler."""
        if context is None:
            context = CallbackContext(application=application)

        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(async_func(context))

    # ‚úÖ –£—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞
    scheduler.add_job(lambda: run_async_job(send_morning_reminder), "cron", hour=5, minute=0)

    # ‚úÖ –£—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    scheduler.add_job(lambda: run_async_job(send_morning_tasks), "cron", hour=7, minute=1)
    scheduler.add_job(lambda: run_async_job(send_morning_tasks), "cron", hour=15, minute=1)

    # ‚úÖ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∏—Ç–æ–≥–∏
    for hour in [6, 12, 18]:
        scheduler.add_job(lambda: run_async_job(send_progress_report), "cron", hour=hour, minute=0)

    # ‚úÖ –ò—Ç–æ–≥–∏ –¥–Ω—è
    scheduler.add_job(lambda: run_async_job(send_daily_summary), "cron", hour=21, minute=1)

    # ‚úÖ –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏
    scheduler.add_job(lambda: run_async_job(send_weekly_summary), "cron", day_of_week="sun", hour=20, minute=0)

    # ‚úÖ –ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –≤ 23:59
    scheduler.add_job(lambda: run_async_job(force_finalize_sessions), "cron", hour=23, minute=59)

    scheduler.start()
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
    application.run_polling()

# ‚úÖ –í—ã–∑–æ–≤ main() –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
if __name__ == "__main__":
    main()



